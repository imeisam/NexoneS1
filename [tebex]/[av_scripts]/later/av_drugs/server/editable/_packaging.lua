-- In this file we have the batches and the needed items to break them into 1g bags
local isProcessing = {} -- used to prevent any lua menu usage
Config = Config or {}
Config.AnimationTime = 15000 --- time in ms (15 seconds default)
Config.Packaging = { -- only used for batch items generated by tables
    ['fentanyl_batch'] = { -- Batch item name
        requires = { -- required items to start packaging
            {item = "baggies", amount = 1},
        },
        output = {
            item = "fentanyl_baggy",
            amount = 25
        },
    },
    ['ketamine_batch'] = { -- Batch item name
        requires = { -- required items to start packaging
            {item = "baggies", amount = 1},
        },
        output = {
            item = "ketamine_baggy",
            amount = 25
        },
    },
    ['heroin_batch'] = { -- Batch item name
        requires = { -- required items to start packaging
            {item = "baggies", amount = 1},
        },
        output = {
            item = "heroin_baggy",
            amount = 25
        },
    },
}

function useBatch(source,item,info) -- triggered when using a batch item from Config.Packaging
    dbug('useBatch()', source, json.encode(item), json.encode(info))
    local metadata, slot = exports['av_laptop']:getMetadata(item, info)
    dbug("metadata, slot", json.encode(metadata), slot)
    local name = item and item['name'] or info and info['name']
    local label = item and item['label'] or info and info['label'] or "Packaging"
    local data = Config.Packaging and Config.Packaging[name] or false
    dbug(name, data)
    if data then
        local hasItems = true
        if data['requires'] and next(data['requires']) then
            for k, v in pairs(data['requires']) do
                hasItems = exports['av_laptop']:hasItem(source, v['item'], v['amount'])
            end
        end
        if hasItems then
            exports['av_laptop']:removeItem(source,name,1,slot,metadata)
            dbug("Player have needed items, trigger packaging animation client side...")
            isProcessing[tostring(source)] = name
            TriggerClientEvent('av_drugs:packaging', source, name, metadata, Config.AnimationTime)
        else
            TriggerClientEvent('av_laptop:notification',source,label,Lang['packaging_error'], 'error')
        end
    else
        dbug('useBatch failed to retrieve batch info', name)
    end
end

RegisterServerEvent('av_drugs:processBatch', function(name,metadata)
    if not name or not metadata then return end
    local src = source
    dbug('av_drugs:processBatch, isProcessing?', isProcessing[tostring(src)])
    if not isProcessing[tostring(src)] then
        local identifier = exports['av_laptop']:getIdentifier(src)
        print("^1[WARNING] ^7Player with identifier ^2"..identifier.."^7 triggered the processBatch event from a lua executor (?)")
        return
    end
    isProcessing[tostring(src)] = nil
    local data = Config.Packaging and Config.Packaging[name] or false
    if data then
        local hasItems = true
        if data['requires'] and next(data['requires']) then
            for k, v in pairs(data['requires']) do
                hasItems = exports['av_laptop']:hasItem(src, v['item'], v['amount'])
            end
        end
        if hasItems then
            for k, v in pairs(data['requires']) do
                exports['av_laptop']:removeItem(src, v['item'], v['amount'])
            end
            dbug("Player passed all checks, give him the baggies...")
            if data and data['output'] then
                local product = data['output']
                exports['av_laptop']:addItem(src,product['item'],product['amount'], metadata)
            end
        else
            TriggerClientEvent('av_laptop:notification',src,label,Lang['packaging_error'], 'error')
        end
    end
end)